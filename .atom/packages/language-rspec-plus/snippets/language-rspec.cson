'.source.ruby.rspec':
  'allow (string, symbol)':
    'prefix': 'allrec'
    'body': 'allow(${1:collaborator}).to receive(:${2:message})${3:.with(${4:args})}$0'
  'and_raise (class)':
    'prefix': 'anr'
    'body': 'and_raise(${1:exception})'
  'and_return with block':
    'prefix': 'anrb'
    'body': 'and_return { $1 }'
  'and_return with args':
    'prefix': 'anra'
    'body': 'and_return(${1:value})'
  'and_throw':
    'prefix': 'ant'
    'body': 'and_throw(${1:sym})'
  'and_yield':
    'prefix': 'any'
    'body': 'and_yield(${1:values})'
  'any_number_of_times':
    'prefix': 'annot'
    'body': 'any_number_of_times'
  'at_least':
    'prefix': 'atl'
    'body': 'at_least(${1:n}).times'
  'at_most':
    'prefix': 'atm'
    'body': 'at_most(${1:n}).times'
  'configure':
    'prefix': 'cnf'
    'body': 'RSpec.configure do |config|\n  config.$0\nend'
  'Matcher (Custom)':
    'prefix': 'matc'
    'body': 'class ${1:ReverseTo}\n  def initialize($3)\n    @$3 = $3\n  end\n\n  def matches?(actual)\n    @actual = actual\n    # Satisfy expectation here. Return false or raise an error if it\'s not met.\n    ${0:@actual.reverse.should == @$3}\n    true\n  end\n\n  def failure_message_for_should\n    "expected #{@actual.inspect} to $2 #{@$3.inspect}, but it didn\'t"\n  end\n\n  def failure_message_for_should_not\n    "expected #{@actual.inspect} not to $2 #{@$3.inspect}, but it did"\n  end\nend\n\ndef ${2:reverse_to}(${3:expected})\n  $1.new($3)\nend'
  'Matcher (DSL)':
    'prefix': 'mat'
    'body': 'RSpec::Matchers.define :${1:name} do |${2:expected}|\n  match do |${3:actual}|\n    $3.$1?($2)\n  end\nend\n'
  'Require spec_helper':
    'prefix': 'reqs'
    'body': 'require "spec_helper"\n\n'
  'Require rails_helper':
    'prefix': 'reqr'
    'body': 'require "rails_helper"\n\n'
  'describe (Controller)':
    'prefix': 'desc'
    'body': 'require File.expand_path(File.dirname(__FILE__) + "/../spec_helper")\n\ndescribe ${1:controller} do\n  $0\nend'
  'describe (RESTful Controller)':
    'prefix': 'desrc'
    'body': "describe ${1:controller}, '${2:GET|POST|PUT|DELETE} ${3:/some/path}${4: with some parameters}' do\n  $0\nend"
  'controller_name':
    'prefix': 'conn'
    'body': 'controller_name :${1:controller}'
  'context "description" do … end':
    'prefix': 'con'
    'body': 'context "${1:description}" do\n  $0\nend'
  'describe "description" do … end':
    'prefix': 'des'
    'body': 'describe "${1:description}" do\n  $0\nend'
  'describe (type)':
    'prefix': 'dest'
    'body': 'describe ${1:Type} do\n  ${2:it "${3:does something}" do\n    $0\n  end}\nend'
  'describe (type, string)':
    'prefix': 'dests'
    'body': 'describe ${1:Type}, "${2:description}" do\n  ${3:it "${4:does something}" do\n    $0\n  end}\nend'
  'described_class.new()':
    'prefix': 'descln'
    'body': 'described_class.new${1:($2)}'
  'described_class':
    'prefix': 'descl'
    'body': 'described_class'
  'exactly':
    'prefix': 'ex'
    'body': 'exactly(${1:n}).times'
  'expect { expression }.to something':
    'prefix': 'expto'
    'body': 'expect {${2: ${1:expression} }}.to ${3:matcher}'
  'expect(subject).to something':
    'prefix': 'exp'
    'body': 'expect(${1:subject}).to ${2:matcher}$0'
  'expect(obj).to be_close':
    'prefix': 'expbc'
    'body': 'expect(${1:subject}).to be_close(${2:result}, ${3:tolerance})$0'
  'expbn':
    'prefix': 'expect(obj).to be_nil'
    'body': 'expect(${1:subject}).to be_nil$0'
  'expect(obj).to be':
    'prefix': 'expbe'
    'body': 'expect(${1:subject}).to be$0'
  'expect do … end.to something':
    'prefix': 'expdo'
    'body': 'expect do\n  ${1:action}\nend.to ${2:matcher}$0'
  'expect(obj).to eq(value)':
    'prefix': 'expeq'
    'body': 'expect(${1:subject}).to eq(${2:value})$0'
  'expect(obj).to eql(value)':
    'prefix': 'expeql'
    'body': 'expect(${1:subject}).to eql(${2:value})$0'
  'expect(obj).to exist':
    'prefix': 'expexist'
    'body': 'expect(${1:subject}).to exist$0'
  'expect(obj).to have(num)':
    'prefix': 'exphave'
    'body': 'expect(${1:subject}).to have(${2:num}).${3:items}$0'
  'expect(object).to have_received(message)':
    'prefix': 'exprec'
    'body': 'expect(${1:collaborator}).to have_received(:${2:message})${3:.with(${4:args})}$0'
  'expect(obj).to include(element)':
    'prefix': 'expinclude'
    'body': 'expect(${1:subject}).to include(${2:element})$0'
  'expect(obj).to match':
    'prefix': 'expmatch'
    'body': 'expect(${1:subject}).to match(/${2:regexp}/)$0'
  'expect { action }.to raise':
    'prefix': 'expraise'
    'body': 'expect { ${1:action} }.to raise_error(${2:Error})$0'
  'expect(object).to receive(message)':
    'prefix': 'exprec'
    'body': 'expect(${1:collaborator}).to receive(:${2:message})${3:.with(${4:args})}$0'
  'expect(subject) be_a_kind_of':
    'prefix': 'bko'
    'body': 'expect(${1:subject}).to be_a_kind_of(${2:klass})$0'
  'expect(subject) be_an_instance_of':
    'prefix': 'bio'
    'body': 'expect(${1:subject}).to be_an_instance_of(${2:klass})$0'
  'expect(subject) be_{predicated_method}':
    'prefix': 'bpm'
    'body': 'expect(${1:subject}).to be_${2:predicated_method}$0'
  'expect equal':
    'prefix': 'equal'
    'body': 'expect(${1:subject}).to equal(${2:value})$0'
  'expect(subject) have_at_least':
    'prefix': 'hat'
    'body': 'expect(${1:subject}).to have_at_least(${2:num}).${3:things}$0'
  'expect(subject) have_at_most':
    'prefix': 'ham'
    'body': 'expect(${1:subject}).to have_at_most(${2:num}).${3:things}$0'
  'expect(subject) have_exactly':
    'prefix': 'he'
    'body': 'expect(${1:subject}).to have_exactly(${2:num}).${3:things}$0'
  'expect(subject) not be':
    'prefix': 'nbe'
    'body': 'expect(${1:subject}).not_to be$0'
  'expect(subject) not be_a_kind_of':
    'prefix': 'nbko'
    'body': 'expect(${1:subject}).not_to be_a_kind_of(${2:klass})$0'
  'expect(subject) not be_an_instance_of':
    'prefix': 'nbio'
    'body': 'expect(${1:subject}).not_to be_an_instance_of(${2:klass})$0'
  'expect(subject) not be_nil':
    'prefix': 'nbn'
    'body': 'expect(${1:subject}).not_to be_nil$0'
  'expect(subject) not be_{predicated_method}':
    'prefix': 'expect(${1:subject}).not_to be_${2:predicated_method}$0'
    'body': 'nbpm'
  'expect not eql':
    'prefix': 'neql'
    'body': 'expect(${1:subject}).not_to eql(${2:value})$0'
  'expect not equal':
    'prefix': 'nequal'
    'body': 'expect(${1:subject}).not_to equal(${2:value})$0'
  'expect(subject) not exist':
    'prefix': 'nexist'
    'body': 'expect(${1:subject}).not_to exist$0'
  'expect(subject) not include(element)':
    'prefix': 'ninc'
    'body': 'expect(${1:subject}).not_to include(${2})$0'
  'expect(subject) not match':
    'prefix': 'nmatch'
    'body': 'expect(${1:subject}).not_to match(/${2:regexp}/)$0'
  'expect not raise_error':
    'prefix': 'nraise'
    'body': 'expect { raise ${1:Error} }.not_to raise_error(${2:Error})$0'
  'expect(subject) not respond_to':
    'prefix': 'nrt'
    'body': 'expect(${1:subject}).not_to respond_to(:${2:method})$0'
  'expect(subject) not satisfy':
    'prefix': 'nsat'
    'body': 'expect(${1:subject}).not_to satisfy { |${2:obj}| ${3:expression} }$0'
  'expect not throw':
    'prefix': 'nthr'
    'body': 'expect { throw $1 }.to_not throw_symbol(:${2:symbol})$0'
  'expect(subject) respond_to':
    'prefix': 'rt'
    'body': 'expect(${1:subject}).to respond_to(:${2:method})$0'
  'expect(subject) satisfy':
    'prefix': 'sat'
    'body': 'expect(${1:subject}).to satisfy { |${2:obj}| ${3:expression} }$0'
  'expect throw':
    'prefix': 'thr'
    'body': 'expect { throw $1 }.to throw_symbol(:${2:symbol})$0'
  'feature "description"':
    'prefix': 'fea'
    'body': 'feature "${1:description}" do\n  $0\nend'
  'instance_double("class")':
    'prefix': 'idou'
    'body': 'instance_double("${1:ClassName}"${2:, ${3:method: nil}}) $0'
  'it "does something" do … end':
    'prefix': 'it'
    'body': 'it "${1:does something}" do\n  $0\nend'
  'it { is_expected.to something }':
    'prefix': 'i'
    'body': 'it { ${2:is_expected.to ${1:matcher}} }$0'
  'it { should something }':
    'prefix': 'iti'
    'body': 'it { ${2:should ${1:matcher}} }$0'
  'it_should_behave_like':
    'prefix': 'itsbl'
    'body': 'it_should_behave_like ${2:"$1"}$0'
  'it_behaves_like':
    'prefix': 'itbl'
    'body': 'it_behaves_like ${2:"$1"}$0'
  'let(:object) { }':
    'prefix': 'let'
    'body': 'let(:${1:object}) { $0 }'
  'let!(:object) { }':
    'prefix': 'letb'
    'body': 'let!(:${1:object}) { $0 }'
  'mock':
    'prefix': 'moc'
    'body': '${1:var} = mock("${2:mock_name}"${3:, :null_object =&gt; true})$0'
  'once':
    'prefix': 'on'
    'body': 'once'
  'ordered':
    'prefix': 'ord'
    'body': 'ordered'
  'pending':
    'prefix': 'pending'
    'body': 'pending${1: "${2:reason}"}'
  'should be_success':
    'prefix': 'shbs'
    'body': 'response.should be_success$0'
  'should_not be_success':
    'prefix': 'shnbs'
    'body': 'response.should_not be_success$0'
  'scenario "does something" do … end':
    'prefix': 'sce'
    'body': 'scenario "${1:does something}" do\n  $0\nend'
  'before':
    'prefix': 'bef'
    'body': 'before do\n  $0\nend'
  'specify {}':
    'prefix': 'specify'
    'body': 'specify { $0 }'
  'subject(:subject) { described_class.new }':
    'prefix': 'subject'
    'body': 'subject(:${1:subject}) { ${3:${2:described_class}.new${4:($5)}} }'
  'after':
    'prefix': 'aft'
    'body': 'after(${1::each}) do\n  $0\nend'
  'twice':
    'prefix': 'tw'
    'body': 'twice'
